#lang racket

(define (square x) (* x x))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))
(define (start-prime-test n start-time)
  (when (fast-prime? n 100)
    (report-prime (- (current-inexact-milliseconds) 
                     start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder 
          (* base (expmod base (- exp 1) m))
          m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))

(define (search-for-primes low high)
  (let ([low (if (odd? low) low (add1 low))])
    (when (low . < . high)
      (timed-prime-test low)
      (search-for-primes (+ 2 low) high))))

(search-for-primes 1009 1020)
(newline)
(search-for-primes 10007 10038)
(newline)
(search-for-primes 100003 100044)
(newline)
(search-for-primes 1000003 1000038)